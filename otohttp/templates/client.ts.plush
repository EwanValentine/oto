// Code generated by oto; DO NOT EDIT.

// HeadersFunc allows you to mutate headers for each request.
// Useful for adding authorization into the client.
interface HeadersFunc {
	(headers: HeadersInit);
}

// Client provides access to remote services.
export class Client {
	// basepath is the path prefix for the requests.
	// This may be a path, or an absolute URL.
	public basepath: String = '/oto/'
	// headers allows calling code to mutate the HTTP
	// headers of the underlying HTTP requests.
	public headers: HeadersFunc
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>export class <%= service.Name %> {
	constructor(readonly client: Client) {}
	<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	async <%= camelize_down(method.Name) %>(<%= camelize_down(method.InputObject.TypeName) %>: <%= method.InputObject.TypeName %> = null) {
		if (<%= camelize_down(method.InputObject.TypeName) %> == null) {
			<%= camelize_down(method.InputObject.TypeName) %> = new <%= method.InputObject.TypeName %>();
		}
		const headers: HeadersInit = new Headers();
		headers.set('Accept', 'application/json');
		headers.set('Content-Type', 'application/json');
		await this.client.headers(headers);
		const response = await fetch(this.client.basepath + '<%= service.Name %>.<%= method.Name %>', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(<%= camelize_down(method.InputObject.TypeName) %>),
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error);
			}
			return new <%= method.OutputObject.TypeName %>(json);
		})
	}
	<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
<%= format_comment_text(object.Comment) %>export class <%= object.Name %> {
	constructor(data?: any) {
		if (data) {
		<%= for (field) in object.Fields { %>
			<%= if (field.Type.IsObject) { %>
				<%= if (field.Type.Multiple) { %>
					if (data.<%= camelize_down(field.Name) %>) {
						this.<%= camelize_down(field.Name) %> = new Array<<%= field.Type.ObjectName() %>>()
						for (let i = 0; i < data.<%= camelize_down(field.Name) %>.length; i++) {
							this.<%= camelize_down(field.Name) %>.push(new <%= field.Type.ObjectName() %>(data.<%= camelize_down(field.Name) %>[i]));
						}
					}
				<% } else { %>
					this.<%= camelize_down(field.Name) %> = new <%= field.Type.ObjectName() %>(data.<%= camelize_down(field.Name) %>);
				<% } %>
			<% } else { %>
			this.<%= camelize_down(field.Name) %> = data.<%= camelize_down(field.Name) %>;
			<% } %>
		<% } %>
		}
	}
<%= for (field) in object.Fields { %>
	<%= format_comment_text(field.Comment) %>	<%= camelize_down(field.Name) %>: <%= if (field.Type.IsObject) { %><%= field.Type.TypeName %><% } else { %><%= field.Type.JSType() %><% } %><%= if (field.Type.Multiple) { %>[]<% } %>;
<% } %>
}
<% } %>
