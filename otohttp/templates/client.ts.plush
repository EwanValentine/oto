// Code generated by oto; DO NOT EDIT.

// NOTE: This template is experimental and under active development. It may not work yet.
// try with:
// 		oto -template ./otohttp/templates/client.ts.plush ./testdata/services/pleasantries
// to format output:
// 		oto -template ./otohttp/templates/client.ts.plush ./testdata/services/pleasantries | npx prettier --stdin-filepath=file.ts

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>export class <%= service.Name %> {
	<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %>	async <%= camelize_down(method.Name) %>(<%= camelize_down(method.InputObject.TypeName) %>: <%= method.InputObject.TypeName %>) {
		if (!<%= camelize_down(method.InputObject.TypeName) %>) {
			<%= camelize_down(method.InputObject.TypeName) %> = new <%= method.InputObject.TypeName %>()
		}
		const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type': 'application/json',
		}
		const response = await fetch('/oto/<%= service.Name %>.<%= method.Name %>', {
			method: 'POST',
			headers: headers,
			body: <%= camelize_down(method.InputObject.TypeName) %>.asJSON(),
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return new <%= method.OutputObject.TypeName %>(json)
		})
	}
	<% } %>
}
<% } %>

<%= for (object) in def.Objects { %>
<%= format_comment_text(object.Comment) %>export class <%= object.Name %> {
	constructor(data?: any) {
		if (data) {
		<%= for (field) in object.Fields { %>
			<%= if (field.Type.IsObject) { %>
				<%= if (field.Type.Multiple) { %>
					this.<%= camelize_down(field.Name) %> = new Array<<%= field.Type.ObjectName() %>>();
					for (let i = 0; i < data.<%= camelize_down(field.Name) %>; i++) {
						this.<%= camelize_down(field.Name) %>.push(new <%= field.Type.ObjectName() %>(data.<%= camelize_down(field.Name) %>[i]))
					}
				<% } else { %>
					this.<%= camelize_down(field.Name) %> = new <%= field.Type.ObjectName() %>(data.<%= camelize_down(field.Name) %>)
				<% } %>
			<% } else { %>
			this.<%= camelize_down(field.Name) %> = data.<%= camelize_down(field.Name) %>
			<% } %>
		<% } %>
		}
	}
<%= for (field) in object.Fields { %>
	<%= format_comment_text(field.Comment) %>	<%= camelize_down(field.Name) %>: <%= if (field.Type.IsObject) { %><%= field.Type.TypeName %><% } else { %><%= field.Type.JSType() %><% } %><%= if (field.Type.Multiple) { %>[]<% } %>;
<% } %>
	asJSON(): string {
		return JSON.stringify(this);
	}
}
<% } %>
